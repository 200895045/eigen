//
//  Artsy-Prefix.pch
//  Artsy
//
//  Created by Orta Therox on 07/31/2013.
//  Copyright (c) 2013 Artsy. All rights reserved.
//

#import <Availability.h>

#ifndef __IPHONE_8_3
#warning "This project uses features only available in iOS SDK 8.3 and later."
#endif

#ifdef __OBJC__
    @import UIKit;
    @import Foundation;
    @import SystemConfiguration;
    @import MobileCoreServices;

    #import "Constants.h"

    @import AFNetworking;
    @import Mantle;
    @import Mantle.metamacros;
    @import AFNetworkActivityLogger;
    @import CocoaLumberjack;
    @import ObjectiveSugar;
    @import FLKAutoLayout;
    @import ORStackView;
    @import ReactiveCocoa;
    @import NAMapKit;
    @import EDColor;
    @import libextobjc;
    @import UIView_BooleanAnimations;
    @import Artsy_UIButtons;
    @import ObjectiveSugar;

    #import <ORStackView/ORStackScrollView.h>
    #import <ORStackView/ORTagBasedAutoStackView.h>

    #import "ArtsyAPI.h"
    #import "Models.h"
    #import "Categories.h"
    #import "StyledSubclasses.h"
    #import "AROptions.h"
    #import "ARTheme.h"
    #import "ARSwitchBoard.h"
    #import "ARNetworkErrorManager.h"
    #import "ARTrialController.h"
    #import "ARTopMenuViewController.h"
    #import "ARScrollNavigationChief.h"
    #import "ARSystemTime.h"
    #import "ARDispatchManager.h"
    #import "ARDeveloperOptions.h"
    #import "ARAutoLayoutDebugging.h"


    #ifdef DEBUG
    static const int ddLogLevel = DDLogLevelVerbose;
    static const int httpLogLevel = AFLoggerLevelInfo;
    #else
    static const int ddLogLevel = DDLogLevelWarning;
    static const int httpLogLevel = AFLoggerLevelError;
    #endif

    #ifdef DEMO_MODE
    static const BOOL ARIsRunningInDemoMode = YES;
    #else
    static const BOOL ARIsRunningInDemoMode = NO;
    #endif

    #import "ARLogger.h"
#endif

// Given that we don't see eye to eye with the GitHub team
// on dependency management, we can't use frameworks without
// getting ambiguous warning when Mantle+RAC and @weakify
// as they just throw it all in together.

// We can work around this for now by having our own commands
// but a more realistic approach is to migrate away from the APIs.

#define _weakify(...) \
    autoreleasepool {} \
    metamacro_foreach_cxt(rac_weakify_,, __weak, __VA_ARGS__)

#define _strongify(...) \
    try {} @finally {} \
    _Pragma("clang diagnostic push") \
    _Pragma("clang diagnostic ignored \"-Wshadow\"") \
    metamacro_foreach(rac_strongify_,, __VA_ARGS__) \
    _Pragma("clang diagnostic pop")

